#!/usr/bin/env bash
set -euo pipefail

AWS_TOKEN_FILE="${AWS_TOKEN_FILE:-/.aws-workload/token-file}"
GCP_WORKLOAD_BASE="${GCP_WORKLOAD_BASE:-/.gcp-workload}"

function decode_base64_url() {
  local len=$((${#1} % 4))
  local result="$1"
  if [ $len -eq 2 ]; then result="$1"'=='
  elif [ $len -eq 3 ]; then result="$1"'='
  fi
  echo "$result" | tr '_-' '/+' | openssl enc -d -base64 | jq
}

function decode_jwt(){
   decode_base64_url "$(echo -n "${2}" | cut -d "." -f "${1}")" | jq .
}

if [ -n "${TFC_DEBUG+x}" ]; then
  decode_jwt 2 "${TFC_WORKLOAD_IDENTITY_TOKEN}"
fi

####################
# AWS Auth
####################
if [ -z ${TFC_AWS_APPLY_ROLE_ARN+x} ] && [ -z ${TFC_AWS_RUN_ROLE_ARN+x} ]; then
  echo "Skipping AWS Auth";
  else
  set +u
  ROLE_ARN="${TFC_AWS_APPLY_ROLE_ARN:-$TFC_AWS_RUN_ROLE_ARN}"
  set -u
  echo "Preparing AWS provider auth..."

  # Remove any previous identity tokens
  rm -f "${AWS_TOKEN_FILE}"
  echo "${TFC_WORKLOAD_IDENTITY_TOKEN}" > "${AWS_TOKEN_FILE}"

  mkdir -p ~/.aws
  rm -f ~/.aws/config
  {
    echo "[default]"
    echo "role_arn=${ROLE_ARN}"
    echo "web_identity_token_file=${AWS_TOKEN_FILE}"
    echo "role_session_name=${TFC_RUN_ID}"
  } >> ~/.aws/config

  echo "IAM Role: ${ROLE_ARN}"

  if [ -n "${TFC_DEBUG+x}" ]; then
    cat ~/.aws/config
  fi

  echo "AWS provider auth prepared"
fi

####################
# GCP Auth
####################
if [ -z ${TFC_GCP_APPLY_SERVICE_ACCOUNT_EMAIL+x} ] && [ -z ${TFC_GCP_RUN_SERVICE_ACCOUNT_EMAIL+x} ]; then
  echo "Skipping GCP Auth";
  else
  set +u
  SERVICE_ACCOUNT_EMAIL="${TFC_GCP_APPLY_SERVICE_ACCOUNT_EMAIL:-$TFC_GCP_RUN_SERVICE_ACCOUNT_EMAIL}"
  set -u
  echo "Preparing GCP provider auth..."

  # Remove any previous temporary credentials
  rm -f "${GCP_WORKLOAD_BASE}/app-credentials"
  rm -f "${GCP_WORKLOAD_BASE}/token-file"

  export AUDIENCE="//iam.googleapis.com/projects/${TFC_GCP_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${TFC_GCP_WORKLOAD_POOL_ID}/providers/${TFC_GCP_WORKLOAD_PROVIDER_ID}"
  export SERVICE_URL="https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${SERVICE_ACCOUNT_EMAIL}:generateAccessToken"

  jq -n -r --arg AUDIENCE "${AUDIENCE}" --arg SERVICE_URL "${SERVICE_URL}" --arg GCP_TOKEN_FILE "${GCP_WORKLOAD_BASE}/token-file" '{
    "type": "external_account", "audience": $AUDIENCE,
    "subject_token_type": "urn:ietf:params:oauth:token-type:jwt",
    "token_url": "https://sts.googleapis.com/v1/token",
    "credential_source": { "file": $GCP_TOKEN_FILE },
    "service_account_impersonation_url": $SERVICE_URL }' > "${GCP_WORKLOAD_BASE}/app-credentials"

  echo "${TFC_WORKLOAD_IDENTITY_TOKEN}" > "${GCP_WORKLOAD_BASE}/token-file"

  echo "GCP Service Account Email: ${SERVICE_ACCOUNT_EMAIL}"

  if [ -n "${TFC_DEBUG+x}" ]; then
    cat "${GCP_WORKLOAD_BASE}/app-credentials"
  fi

  echo "GCP provider auth prepared"
fi

####################
# Vault Auth
####################
if [ -z ${TFC_WORKLOAD_IDENTITY_AUDIENCE+x} ]; then
  echo "Skipping VAULT Auth";
  else
    echo "Preparing VAULT provider auth..."
    export TERRAFORM_VAULT_AUTH_JWT="$TFC_WORKLOAD_IDENTITY_TOKEN"
    echo "VAULT provider auth prepared"
fi
